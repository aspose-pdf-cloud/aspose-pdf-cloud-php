<?php
/**
 * TiffExportOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\PDF
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 *
 *   Copyright (c) 2018 Aspose.Pdf for Cloud
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\PDF\Model;

use \ArrayAccess;
use \Aspose\PDF\ObjectSerializer;

/**
 * TiffExportOptions Class Doc Comment
 *
 * @category Class
 * @description Used for tiff export options setting.
 * @package  Aspose\PDF
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TiffExportOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TiffExportOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'brightness' => 'double',
        'compression' => '\Aspose\PDF\Model\CompressionType',
        'color_depth' => '\Aspose\PDF\Model\ColorDepth',
        'left_margin' => 'int',
        'right_margin' => 'int',
        'top_margin' => 'int',
        'bottom_margin' => 'int',
        'orientation' => '\Aspose\PDF\Model\ShapeType',
        'skip_blank_pages' => 'bool',
        'width' => 'int',
        'height' => 'int',
        'x_resolution' => 'int',
        'y_resolution' => 'int',
        'page_index' => 'int',
        'page_count' => 'int',
        'result_file' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'brightness' => 'double',
        'compression' => null,
        'color_depth' => null,
        'left_margin' => 'int32',
        'right_margin' => 'int32',
        'top_margin' => 'int32',
        'bottom_margin' => 'int32',
        'orientation' => null,
        'skip_blank_pages' => null,
        'width' => 'int32',
        'height' => 'int32',
        'x_resolution' => 'int32',
        'y_resolution' => 'int32',
        'page_index' => 'int32',
        'page_count' => 'int32',
        'result_file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brightness' => 'Brightness',
        'compression' => 'Compression',
        'color_depth' => 'ColorDepth',
        'left_margin' => 'LeftMargin',
        'right_margin' => 'RightMargin',
        'top_margin' => 'TopMargin',
        'bottom_margin' => 'BottomMargin',
        'orientation' => 'Orientation',
        'skip_blank_pages' => 'SkipBlankPages',
        'width' => 'Width',
        'height' => 'Height',
        'x_resolution' => 'XResolution',
        'y_resolution' => 'YResolution',
        'page_index' => 'PageIndex',
        'page_count' => 'PageCount',
        'result_file' => 'ResultFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brightness' => 'setBrightness',
        'compression' => 'setCompression',
        'color_depth' => 'setColorDepth',
        'left_margin' => 'setLeftMargin',
        'right_margin' => 'setRightMargin',
        'top_margin' => 'setTopMargin',
        'bottom_margin' => 'setBottomMargin',
        'orientation' => 'setOrientation',
        'skip_blank_pages' => 'setSkipBlankPages',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'x_resolution' => 'setXResolution',
        'y_resolution' => 'setYResolution',
        'page_index' => 'setPageIndex',
        'page_count' => 'setPageCount',
        'result_file' => 'setResultFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brightness' => 'getBrightness',
        'compression' => 'getCompression',
        'color_depth' => 'getColorDepth',
        'left_margin' => 'getLeftMargin',
        'right_margin' => 'getRightMargin',
        'top_margin' => 'getTopMargin',
        'bottom_margin' => 'getBottomMargin',
        'orientation' => 'getOrientation',
        'skip_blank_pages' => 'getSkipBlankPages',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'x_resolution' => 'getXResolution',
        'y_resolution' => 'getYResolution',
        'page_index' => 'getPageIndex',
        'page_count' => 'getPageCount',
        'result_file' => 'getResultFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brightness'] = isset($data['brightness']) ? $data['brightness'] : null;
        $this->container['compression'] = isset($data['compression']) ? $data['compression'] : null;
        $this->container['color_depth'] = isset($data['color_depth']) ? $data['color_depth'] : null;
        $this->container['left_margin'] = isset($data['left_margin']) ? $data['left_margin'] : null;
        $this->container['right_margin'] = isset($data['right_margin']) ? $data['right_margin'] : null;
        $this->container['top_margin'] = isset($data['top_margin']) ? $data['top_margin'] : null;
        $this->container['bottom_margin'] = isset($data['bottom_margin']) ? $data['bottom_margin'] : null;
        $this->container['orientation'] = isset($data['orientation']) ? $data['orientation'] : null;
        $this->container['skip_blank_pages'] = isset($data['skip_blank_pages']) ? $data['skip_blank_pages'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['x_resolution'] = isset($data['x_resolution']) ? $data['x_resolution'] : null;
        $this->container['y_resolution'] = isset($data['y_resolution']) ? $data['y_resolution'] : null;
        $this->container['page_index'] = isset($data['page_index']) ? $data['page_index'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['result_file'] = isset($data['result_file']) ? $data['result_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets brightness
     *
     * @return double
     */
    public function getBrightness()
    {
        return $this->container['brightness'];
    }

    /**
     * Sets brightness
     *
     * @param double $brightness Image brightness.
     *
     * @return $this
     */
    public function setBrightness($brightness)
    {
        $this->container['brightness'] = $brightness;

        return $this;
    }

    /**
     * Gets compression
     *
     * @return \Aspose\PDF\Model\CompressionType
     */
    public function getCompression()
    {
        return $this->container['compression'];
    }

    /**
     * Sets compression
     *
     * @param \Aspose\PDF\Model\CompressionType $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None.
     *
     * @return $this
     */
    public function setCompression($compression)
    {
        $this->container['compression'] = $compression;

        return $this;
    }

    /**
     * Gets color_depth
     *
     * @return \Aspose\PDF\Model\ColorDepth
     */
    public function getColorDepth()
    {
        return $this->container['color_depth'];
    }

    /**
     * Sets color_depth
     *
     * @param \Aspose\PDF\Model\ColorDepth $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp.
     *
     * @return $this
     */
    public function setColorDepth($color_depth)
    {
        $this->container['color_depth'] = $color_depth;

        return $this;
    }

    /**
     * Gets left_margin
     *
     * @return int
     */
    public function getLeftMargin()
    {
        return $this->container['left_margin'];
    }

    /**
     * Sets left_margin
     *
     * @param int $left_margin Left image margin.
     *
     * @return $this
     */
    public function setLeftMargin($left_margin)
    {
        $this->container['left_margin'] = $left_margin;

        return $this;
    }

    /**
     * Gets right_margin
     *
     * @return int
     */
    public function getRightMargin()
    {
        return $this->container['right_margin'];
    }

    /**
     * Sets right_margin
     *
     * @param int $right_margin Right image margin.
     *
     * @return $this
     */
    public function setRightMargin($right_margin)
    {
        $this->container['right_margin'] = $right_margin;

        return $this;
    }

    /**
     * Gets top_margin
     *
     * @return int
     */
    public function getTopMargin()
    {
        return $this->container['top_margin'];
    }

    /**
     * Sets top_margin
     *
     * @param int $top_margin Top image margin.
     *
     * @return $this
     */
    public function setTopMargin($top_margin)
    {
        $this->container['top_margin'] = $top_margin;

        return $this;
    }

    /**
     * Gets bottom_margin
     *
     * @return int
     */
    public function getBottomMargin()
    {
        return $this->container['bottom_margin'];
    }

    /**
     * Sets bottom_margin
     *
     * @param int $bottom_margin Bottom image margin.
     *
     * @return $this
     */
    public function setBottomMargin($bottom_margin)
    {
        $this->container['bottom_margin'] = $bottom_margin;

        return $this;
    }

    /**
     * Gets orientation
     *
     * @return \Aspose\PDF\Model\ShapeType
     */
    public function getOrientation()
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     *
     * @param \Aspose\PDF\Model\ShapeType $orientation Image orientation. Possible values are: None, Landscape, Portait.
     *
     * @return $this
     */
    public function setOrientation($orientation)
    {
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets skip_blank_pages
     *
     * @return bool
     */
    public function getSkipBlankPages()
    {
        return $this->container['skip_blank_pages'];
    }

    /**
     * Sets skip_blank_pages
     *
     * @param bool $skip_blank_pages Skip blank pages flag.
     *
     * @return $this
     */
    public function setSkipBlankPages($skip_blank_pages)
    {
        $this->container['skip_blank_pages'] = $skip_blank_pages;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Image width.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Image height.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets x_resolution
     *
     * @return int
     */
    public function getXResolution()
    {
        return $this->container['x_resolution'];
    }

    /**
     * Sets x_resolution
     *
     * @param int $x_resolution Horizontal resolution.
     *
     * @return $this
     */
    public function setXResolution($x_resolution)
    {
        $this->container['x_resolution'] = $x_resolution;

        return $this;
    }

    /**
     * Gets y_resolution
     *
     * @return int
     */
    public function getYResolution()
    {
        return $this->container['y_resolution'];
    }

    /**
     * Sets y_resolution
     *
     * @param int $y_resolution Vertical resolution.
     *
     * @return $this
     */
    public function setYResolution($y_resolution)
    {
        $this->container['y_resolution'] = $y_resolution;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int $page_index Start page to export.
     *
     * @return $this
     */
    public function setPageIndex($page_index)
    {
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count Number of pages to export.
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets result_file
     *
     * @return string
     */
    public function getResultFile()
    {
        return $this->container['result_file'];
    }

    /**
     * Sets result_file
     *
     * @param string $result_file Resulting image file.
     *
     * @return $this
     */
    public function setResultFile($result_file)
    {
        $this->container['result_file'] = $result_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


