<?php
/**
 * PdfApi
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\PDF
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 *
 *   Copyright (c) 2018 Aspose.Pdf for Cloud
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\PDF\Api;

use \Aspose\PDF\ApiClient;
use \Aspose\PDF\ApiException;
use \Aspose\PDF\Configuration;
use \Aspose\PDF\ObjectSerializer;

/**
 * PdfApi Class Doc Comment
 *
 * @category Class
 * @package  Aspose\PDF
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PdfApi
{
    /**
     * API Client
     *
     * @var \Aspose\PDF\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Aspose\PDF\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Aspose\PDF\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Aspose\PDF\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Aspose\PDF\ApiClient $apiClient set the API client
     *
     * @return PdfApi
     */
    public function setApiClient(\Aspose\PDF\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deletePage
     *
     * Delete document page by its number.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function deletePage($name, $page_number, $storage = null, $folder = null)
    {
        list($response) = $this->deletePageWithHttpInfo($name, $page_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation deletePageWithHttpInfo
     *
     * Delete document page by its number.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePageWithHttpInfo($name, $page_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deletePage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling deletePage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProperties
     *
     * Delete custom document properties.
     *
     * @param string $name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function deleteProperties($name, $storage = null, $folder = null)
    {
        list($response) = $this->deletePropertiesWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation deletePropertiesWithHttpInfo
     *
     * Delete custom document properties.
     *
     * @param string $name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePropertiesWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteProperties');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/documentproperties";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/documentproperties'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProperty
     *
     * Delete document property.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function deleteProperty($name, $property_name, $storage = null, $folder = null)
    {
        list($response) = $this->deletePropertyWithHttpInfo($name, $property_name, $storage, $folder);
        return $response;
    }

    /**
     * Operation deletePropertyWithHttpInfo
     *
     * Delete document property.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePropertyWithHttpInfo($name, $property_name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property_name when calling deleteProperty');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/documentproperties/{propertyName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                "{" . "propertyName" . "}",
                $this->apiClient->getSerializer()->toPathValue($property_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/documentproperties/{propertyName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocument
     *
     * Read common document info or convert to some format if the format specified.
     *
     * @param string $name The document name. (required)
     * @param string $format The format to convert. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param string $out_path Path to save result (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getDocument($name, $format = null, $storage = null, $folder = null, $out_path = null)
    {
        list($response) = $this->getDocumentWithHttpInfo($name, $format, $storage, $folder, $out_path);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * Read common document info or convert to some format if the format specified.
     *
     * @param string $name The document name. (required)
     * @param string $format The format to convert. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param string $out_path Path to save result (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo($name, $format = null, $storage = null, $folder = null, $out_path = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentAttachmentByIndex
     *
     * Read document attachment info by its index.
     *
     * @param string $name The document name. (required)
     * @param int $attachment_index The attachment index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\AttachmentResponse
     */
    public function getDocumentAttachmentByIndex($name, $attachment_index, $storage = null, $folder = null)
    {
        list($response) = $this->getDocumentAttachmentByIndexWithHttpInfo($name, $attachment_index, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDocumentAttachmentByIndexWithHttpInfo
     *
     * Read document attachment info by its index.
     *
     * @param string $name The document name. (required)
     * @param int $attachment_index The attachment index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\AttachmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentAttachmentByIndexWithHttpInfo($name, $attachment_index, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentAttachmentByIndex');
        }
        // verify the required parameter 'attachment_index' is set
        if ($attachment_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attachment_index when calling getDocumentAttachmentByIndex');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/attachments/{attachmentIndex}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($attachment_index !== null) {
            $resourcePath = str_replace(
                "{" . "attachmentIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($attachment_index),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\AttachmentResponse',
                '/pdf/{name}/attachments/{attachmentIndex}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\AttachmentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\AttachmentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentAttachments
     *
     * Read document attachments info.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\AttachmentsResponse
     */
    public function getDocumentAttachments($name, $storage = null, $folder = null)
    {
        list($response) = $this->getDocumentAttachmentsWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDocumentAttachmentsWithHttpInfo
     *
     * Read document attachments info.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\AttachmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentAttachmentsWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentAttachments');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/attachments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\AttachmentsResponse',
                '/pdf/{name}/attachments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\AttachmentsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\AttachmentsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentBookmarks
     *
     * Read document bookmark/bookmarks (including children).
     *
     * @param string $name The document name. (required)
     * @param string $bookmark_path The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getDocumentBookmarks($name, $bookmark_path = null, $storage = null, $folder = null)
    {
        list($response) = $this->getDocumentBookmarksWithHttpInfo($name, $bookmark_path, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDocumentBookmarksWithHttpInfo
     *
     * Read document bookmark/bookmarks (including children).
     *
     * @param string $name The document name. (required)
     * @param string $bookmark_path The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentBookmarksWithHttpInfo($name, $bookmark_path = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentBookmarks');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/bookmarks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($bookmark_path !== null) {
            $queryParams['bookmarkPath'] = $this->apiClient->getSerializer()->toQueryValue($bookmark_path);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/bookmarks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentProperties
     *
     * Read document properties.
     *
     * @param string $name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentPropertiesResponse
     */
    public function getDocumentProperties($name, $storage = null, $folder = null)
    {
        list($response) = $this->getDocumentPropertiesWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDocumentPropertiesWithHttpInfo
     *
     * Read document properties.
     *
     * @param string $name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentPropertiesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentPropertiesWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentProperties');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/documentproperties";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentPropertiesResponse',
                '/pdf/{name}/documentproperties'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentPropertiesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentPropertiesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentProperty
     *
     * Read document property by name.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentPropertyResponse
     */
    public function getDocumentProperty($name, $property_name, $storage = null, $folder = null)
    {
        list($response) = $this->getDocumentPropertyWithHttpInfo($name, $property_name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDocumentPropertyWithHttpInfo
     *
     * Read document property by name.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentPropertyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentPropertyWithHttpInfo($name, $property_name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property_name when calling getDocumentProperty');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/documentproperties/{propertyName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                "{" . "propertyName" . "}",
                $this->apiClient->getSerializer()->toPathValue($property_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentPropertyResponse',
                '/pdf/{name}/documentproperties/{propertyName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentPropertyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentPropertyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownload
     *
     * Download a specific file
     *
     * @param string $path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param string $version_id File&#39;s version (optional)
     * @param string $storage User&#39;s storage name (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getDownload($path, $version_id = null, $storage = null)
    {
        list($response) = $this->getDownloadWithHttpInfo($path, $version_id, $storage);
        return $response;
    }

    /**
     * Operation getDownloadWithHttpInfo
     *
     * Download a specific file
     *
     * @param string $path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param string $version_id File&#39;s version (optional)
     * @param string $storage User&#39;s storage name (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadWithHttpInfo($path, $version_id = null, $storage = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getDownload');
        }
        // parse inputs
        $resourcePath = "/storage/file";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = $this->apiClient->getSerializer()->toQueryValue($version_id);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/storage/file'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownloadDocumentAttachmentByIndex
     *
     * Download document attachment content by its index.
     *
     * @param string $name The document name. (required)
     * @param int $attachment_index The attachment index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getDownloadDocumentAttachmentByIndex($name, $attachment_index, $storage = null, $folder = null)
    {
        list($response) = $this->getDownloadDocumentAttachmentByIndexWithHttpInfo($name, $attachment_index, $storage, $folder);
        return $response;
    }

    /**
     * Operation getDownloadDocumentAttachmentByIndexWithHttpInfo
     *
     * Download document attachment content by its index.
     *
     * @param string $name The document name. (required)
     * @param int $attachment_index The attachment index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadDocumentAttachmentByIndexWithHttpInfo($name, $attachment_index, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDownloadDocumentAttachmentByIndex');
        }
        // verify the required parameter 'attachment_index' is set
        if ($attachment_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attachment_index when calling getDownloadDocumentAttachmentByIndex');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/attachments/{attachmentIndex}/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($attachment_index !== null) {
            $resourcePath = str_replace(
                "{" . "attachmentIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($attachment_index),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/attachments/{attachmentIndex}/download'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getField
     *
     * Get document field by name.
     *
     * @param string $name The document name. (required)
     * @param string $field_name The field name/ (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\FieldResponse
     */
    public function getField($name, $field_name, $storage = null, $folder = null)
    {
        list($response) = $this->getFieldWithHttpInfo($name, $field_name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getFieldWithHttpInfo
     *
     * Get document field by name.
     *
     * @param string $name The document name. (required)
     * @param string $field_name The field name/ (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\FieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFieldWithHttpInfo($name, $field_name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getField');
        }
        // verify the required parameter 'field_name' is set
        if ($field_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_name when calling getField');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fields/{fieldName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                "{" . "fieldName" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\FieldResponse',
                '/pdf/{name}/fields/{fieldName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\FieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\FieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFields
     *
     * Get document fields.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\FieldsResponse
     */
    public function getFields($name, $storage = null, $folder = null)
    {
        list($response) = $this->getFieldsWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getFieldsWithHttpInfo
     *
     * Get document fields.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\FieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFieldsWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFields');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\FieldsResponse',
                '/pdf/{name}/fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\FieldsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\FieldsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFragment
     *
     * Read page fragment.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemsResponse
     */
    public function getFragment($name, $page_number, $fragment_number, $with_empty = null, $storage = null, $folder = null)
    {
        list($response) = $this->getFragmentWithHttpInfo($name, $page_number, $fragment_number, $with_empty, $storage, $folder);
        return $response;
    }

    /**
     * Operation getFragmentWithHttpInfo
     *
     * Read page fragment.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFragmentWithHttpInfo($name, $page_number, $fragment_number, $with_empty = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFragment');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getFragment');
        }
        // verify the required parameter 'fragment_number' is set
        if ($fragment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fragment_number when calling getFragment');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_empty !== null) {
            $queryParams['withEmpty'] = $this->apiClient->getSerializer()->toQueryValue($with_empty);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($fragment_number !== null) {
            $resourcePath = str_replace(
                "{" . "fragmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($fragment_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemsResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFragmentTextFormat
     *
     * Read page fragment text format.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextFormatResponse
     */
    public function getFragmentTextFormat($name, $page_number, $fragment_number, $storage = null, $folder = null)
    {
        list($response) = $this->getFragmentTextFormatWithHttpInfo($name, $page_number, $fragment_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getFragmentTextFormatWithHttpInfo
     *
     * Read page fragment text format.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextFormatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFragmentTextFormatWithHttpInfo($name, $page_number, $fragment_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFragmentTextFormat');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getFragmentTextFormat');
        }
        // verify the required parameter 'fragment_number' is set
        if ($fragment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fragment_number when calling getFragmentTextFormat');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/textFormat";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($fragment_number !== null) {
            $resourcePath = str_replace(
                "{" . "fragmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($fragment_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextFormatResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/textFormat'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextFormatResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextFormatResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFragments
     *
     * Read page fragments.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemsResponse
     */
    public function getFragments($name, $page_number, $with_empty = null, $storage = null, $folder = null)
    {
        list($response) = $this->getFragmentsWithHttpInfo($name, $page_number, $with_empty, $storage, $folder);
        return $response;
    }

    /**
     * Operation getFragmentsWithHttpInfo
     *
     * Read page fragments.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFragmentsWithHttpInfo($name, $page_number, $with_empty = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFragments');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getFragments');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_empty !== null) {
            $queryParams['withEmpty'] = $this->apiClient->getSerializer()->toQueryValue($with_empty);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemsResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImage
     *
     * Extract document image in format specified.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $image_number The image format. (required)
     * @param string $format Image format to convert, if not specified the common image data is read. (optional)
     * @param int $width The converted image width. (optional, default to 0)
     * @param int $height The converted image height. (optional, default to 0)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getImage($name, $page_number, $image_number, $format = null, $width = '0', $height = '0', $storage = null, $folder = null)
    {
        list($response) = $this->getImageWithHttpInfo($name, $page_number, $image_number, $format, $width, $height, $storage, $folder);
        return $response;
    }

    /**
     * Operation getImageWithHttpInfo
     *
     * Extract document image in format specified.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $image_number The image format. (required)
     * @param string $format Image format to convert, if not specified the common image data is read. (optional)
     * @param int $width The converted image width. (optional, default to 0)
     * @param int $height The converted image height. (optional, default to 0)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageWithHttpInfo($name, $page_number, $image_number, $format = null, $width = '0', $height = '0', $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getImage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getImage');
        }
        // verify the required parameter 'image_number' is set
        if ($image_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_number when calling getImage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($image_number !== null) {
            $resourcePath = str_replace(
                "{" . "imageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/pages/{pageNumber}/images/{imageNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImages
     *
     * Read document images.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\ImagesResponse
     */
    public function getImages($name, $page_number, $storage = null, $folder = null)
    {
        list($response) = $this->getImagesWithHttpInfo($name, $page_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getImagesWithHttpInfo
     *
     * Read document images.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\ImagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImagesWithHttpInfo($name, $page_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getImages');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getImages');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\ImagesResponse',
                '/pdf/{name}/pages/{pageNumber}/images'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\ImagesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\ImagesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPage
     *
     * Convert document page to format specified.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $format The format to convert if specified. (optional)
     * @param int $width The converted image width. (optional, default to 0)
     * @param int $height The converted image height. (optional, default to 0)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPage($name, $page_number, $format = null, $width = '0', $height = '0', $storage = null, $folder = null)
    {
        list($response) = $this->getPageWithHttpInfo($name, $page_number, $format, $width, $height, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageWithHttpInfo
     *
     * Convert document page to format specified.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $format The format to convert if specified. (optional)
     * @param int $width The converted image width. (optional, default to 0)
     * @param int $height The converted image height. (optional, default to 0)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageWithHttpInfo($name, $page_number, $format = null, $width = '0', $height = '0', $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/pages/{pageNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageAnnotation
     *
     * Read document page annotation by its number.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $annotation_number The annotation number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\AnnotationResponse
     */
    public function getPageAnnotation($name, $page_number, $annotation_number, $storage = null, $folder = null)
    {
        list($response) = $this->getPageAnnotationWithHttpInfo($name, $page_number, $annotation_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageAnnotationWithHttpInfo
     *
     * Read document page annotation by its number.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $annotation_number The annotation number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\AnnotationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageAnnotationWithHttpInfo($name, $page_number, $annotation_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageAnnotation');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageAnnotation');
        }
        // verify the required parameter 'annotation_number' is set
        if ($annotation_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $annotation_number when calling getPageAnnotation');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/annotations/{annotationNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($annotation_number !== null) {
            $resourcePath = str_replace(
                "{" . "annotationNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($annotation_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\AnnotationResponse',
                '/pdf/{name}/pages/{pageNumber}/annotations/{annotationNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\AnnotationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\AnnotationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageAnnotations
     *
     * Read documant page annotations.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\AnnotationsResponse
     */
    public function getPageAnnotations($name, $page_number, $storage = null, $folder = null)
    {
        list($response) = $this->getPageAnnotationsWithHttpInfo($name, $page_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageAnnotationsWithHttpInfo
     *
     * Read documant page annotations.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\AnnotationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageAnnotationsWithHttpInfo($name, $page_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageAnnotations');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageAnnotations');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/annotations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\AnnotationsResponse',
                '/pdf/{name}/pages/{pageNumber}/annotations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\AnnotationsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\AnnotationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageLinkAnnotationByIndex
     *
     * Read document page link annotation by its index.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $link_index The link index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\LinkAnnotationResponse
     */
    public function getPageLinkAnnotationByIndex($name, $page_number, $link_index, $storage = null, $folder = null)
    {
        list($response) = $this->getPageLinkAnnotationByIndexWithHttpInfo($name, $page_number, $link_index, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageLinkAnnotationByIndexWithHttpInfo
     *
     * Read document page link annotation by its index.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $link_index The link index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\LinkAnnotationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageLinkAnnotationByIndexWithHttpInfo($name, $page_number, $link_index, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageLinkAnnotationByIndex');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageLinkAnnotationByIndex');
        }
        // verify the required parameter 'link_index' is set
        if ($link_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $link_index when calling getPageLinkAnnotationByIndex');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/links/{linkIndex}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($link_index !== null) {
            $resourcePath = str_replace(
                "{" . "linkIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($link_index),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\LinkAnnotationResponse',
                '/pdf/{name}/pages/{pageNumber}/links/{linkIndex}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\LinkAnnotationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\LinkAnnotationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageLinkAnnotations
     *
     * Read document page link annotations.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\LinkAnnotationsResponse
     */
    public function getPageLinkAnnotations($name, $page_number, $storage = null, $folder = null)
    {
        list($response) = $this->getPageLinkAnnotationsWithHttpInfo($name, $page_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageLinkAnnotationsWithHttpInfo
     *
     * Read document page link annotations.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\LinkAnnotationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageLinkAnnotationsWithHttpInfo($name, $page_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageLinkAnnotations');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageLinkAnnotations');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/links";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\LinkAnnotationsResponse',
                '/pdf/{name}/pages/{pageNumber}/links'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\LinkAnnotationsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\LinkAnnotationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageText
     *
     * Read page text items.
     *
     * @param string $name The document name. (required)
     * @param int $page_number Number of page (starting from 1). (required)
     * @param int $x  (required)
     * @param int $y  (required)
     * @param int $width  (required)
     * @param int $height  (required)
     * @param string[] $format List of formats for search. (optional)
     * @param string $regex Formats are specified as a regular expression. (optional)
     * @param bool $split_rects Split result fragments (default is true). (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextRectsResponse
     */
    public function getPageText($name, $page_number, $x, $y, $width, $height, $format = null, $regex = null, $split_rects = null, $folder = null)
    {
        list($response) = $this->getPageTextWithHttpInfo($name, $page_number, $x, $y, $width, $height, $format, $regex, $split_rects, $folder);
        return $response;
    }

    /**
     * Operation getPageTextWithHttpInfo
     *
     * Read page text items.
     *
     * @param string $name The document name. (required)
     * @param int $page_number Number of page (starting from 1). (required)
     * @param int $x  (required)
     * @param int $y  (required)
     * @param int $width  (required)
     * @param int $height  (required)
     * @param string[] $format List of formats for search. (optional)
     * @param string $regex Formats are specified as a regular expression. (optional)
     * @param bool $split_rects Split result fragments (default is true). (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextRectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageTextWithHttpInfo($name, $page_number, $x, $y, $width, $height, $format = null, $regex = null, $split_rects = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageText');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageText');
        }
        // verify the required parameter 'x' is set
        if ($x === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x when calling getPageText');
        }
        // verify the required parameter 'y' is set
        if ($y === null) {
            throw new \InvalidArgumentException('Missing the required parameter $y when calling getPageText');
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException('Missing the required parameter $width when calling getPageText');
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException('Missing the required parameter $height when calling getPageText');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/text";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($format)) {
            $format = $this->apiClient->getSerializer()->serializeCollection($format, 'multi', true);
        }
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($regex !== null) {
            $queryParams['regex'] = $this->apiClient->getSerializer()->toQueryValue($regex);
        }
        // query params
        if ($x !== null) {
            $queryParams['X'] = $this->apiClient->getSerializer()->toQueryValue($x);
        }
        // query params
        if ($y !== null) {
            $queryParams['Y'] = $this->apiClient->getSerializer()->toQueryValue($y);
        }
        // query params
        if ($width !== null) {
            $queryParams['Width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['Height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($split_rects !== null) {
            $queryParams['splitRects'] = $this->apiClient->getSerializer()->toQueryValue($split_rects);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextRectsResponse',
                '/pdf/{name}/pages/{pageNumber}/text'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextRectsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextRectsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPageTextItems
     *
     * Read page text items.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemsResponse
     */
    public function getPageTextItems($name, $page_number, $with_empty = null, $storage = null, $folder = null)
    {
        list($response) = $this->getPageTextItemsWithHttpInfo($name, $page_number, $with_empty, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPageTextItemsWithHttpInfo
     *
     * Read page text items.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageTextItemsWithHttpInfo($name, $page_number, $with_empty = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPageTextItems');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getPageTextItems');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/textItems";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_empty !== null) {
            $queryParams['withEmpty'] = $this->apiClient->getSerializer()->toQueryValue($with_empty);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemsResponse',
                '/pdf/{name}/pages/{pageNumber}/textItems'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPages
     *
     * Read document pages info.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentPagesResponse
     */
    public function getPages($name, $storage = null, $folder = null)
    {
        list($response) = $this->getPagesWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getPagesWithHttpInfo
     *
     * Read document pages info.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentPagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPagesWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPages');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentPagesResponse',
                '/pdf/{name}/pages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentPagesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentPagesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToDoc
     *
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToDoc($name, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $folder = null)
    {
        list($response) = $this->getPdfInStorageToDocWithHttpInfo($name, $add_return_to_line_end, $format, $image_resolution_x, $image_resolution_y, $max_distance_between_text_lines, $mode, $recognize_bullets, $relative_horizontal_proximity, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToDocWithHttpInfo
     *
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToDocWithHttpInfo($name, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToDoc');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/doc";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($add_return_to_line_end !== null) {
            $queryParams['addReturnToLineEnd'] = $this->apiClient->getSerializer()->toQueryValue($add_return_to_line_end);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($image_resolution_x !== null) {
            $queryParams['imageResolutionX'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_x);
        }
        // query params
        if ($image_resolution_y !== null) {
            $queryParams['imageResolutionY'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_y);
        }
        // query params
        if ($max_distance_between_text_lines !== null) {
            $queryParams['maxDistanceBetweenTextLines'] = $this->apiClient->getSerializer()->toQueryValue($max_distance_between_text_lines);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = $this->apiClient->getSerializer()->toQueryValue($mode);
        }
        // query params
        if ($recognize_bullets !== null) {
            $queryParams['recognizeBullets'] = $this->apiClient->getSerializer()->toQueryValue($recognize_bullets);
        }
        // query params
        if ($relative_horizontal_proximity !== null) {
            $queryParams['relativeHorizontalProximity'] = $this->apiClient->getSerializer()->toQueryValue($relative_horizontal_proximity);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/doc'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToPdfA
     *
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param string $type Type of PdfA format. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToPdfA($name, $type, $folder = null)
    {
        list($response) = $this->getPdfInStorageToPdfAWithHttpInfo($name, $type, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToPdfAWithHttpInfo
     *
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param string $type Type of PdfA format. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToPdfAWithHttpInfo($name, $type, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToPdfA');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getPdfInStorageToPdfA');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/pdfa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/pdfa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToSvg
     *
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToSvg($name, $compress_output_to_zip_archive = null, $folder = null)
    {
        list($response) = $this->getPdfInStorageToSvgWithHttpInfo($name, $compress_output_to_zip_archive, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToSvgWithHttpInfo
     *
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToSvgWithHttpInfo($name, $compress_output_to_zip_archive = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToSvg');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/svg";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($compress_output_to_zip_archive !== null) {
            $queryParams['compressOutputToZipArchive'] = $this->apiClient->getSerializer()->toQueryValue($compress_output_to_zip_archive);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/svg'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToTiff
     *
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToTiff($name, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $folder = null)
    {
        list($response) = $this->getPdfInStorageToTiffWithHttpInfo($name, $brightness, $compression, $color_depth, $left_margin, $right_margin, $top_margin, $bottom_margin, $orientation, $skip_blank_pages, $width, $height, $x_resolution, $y_resolution, $page_index, $page_count, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToTiffWithHttpInfo
     *
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToTiffWithHttpInfo($name, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToTiff');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/tiff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($brightness !== null) {
            $queryParams['brightness'] = $this->apiClient->getSerializer()->toQueryValue($brightness);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($color_depth !== null) {
            $queryParams['colorDepth'] = $this->apiClient->getSerializer()->toQueryValue($color_depth);
        }
        // query params
        if ($left_margin !== null) {
            $queryParams['leftMargin'] = $this->apiClient->getSerializer()->toQueryValue($left_margin);
        }
        // query params
        if ($right_margin !== null) {
            $queryParams['rightMargin'] = $this->apiClient->getSerializer()->toQueryValue($right_margin);
        }
        // query params
        if ($top_margin !== null) {
            $queryParams['topMargin'] = $this->apiClient->getSerializer()->toQueryValue($top_margin);
        }
        // query params
        if ($bottom_margin !== null) {
            $queryParams['bottomMargin'] = $this->apiClient->getSerializer()->toQueryValue($bottom_margin);
        }
        // query params
        if ($orientation !== null) {
            $queryParams['orientation'] = $this->apiClient->getSerializer()->toQueryValue($orientation);
        }
        // query params
        if ($skip_blank_pages !== null) {
            $queryParams['skipBlankPages'] = $this->apiClient->getSerializer()->toQueryValue($skip_blank_pages);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($x_resolution !== null) {
            $queryParams['xResolution'] = $this->apiClient->getSerializer()->toQueryValue($x_resolution);
        }
        // query params
        if ($y_resolution !== null) {
            $queryParams['yResolution'] = $this->apiClient->getSerializer()->toQueryValue($y_resolution);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($page_index);
        }
        // query params
        if ($page_count !== null) {
            $queryParams['pageCount'] = $this->apiClient->getSerializer()->toQueryValue($page_count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/tiff'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToXls
     *
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToXls($name, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $folder = null)
    {
        list($response) = $this->getPdfInStorageToXlsWithHttpInfo($name, $insert_blank_column_at_first, $minimize_the_number_of_worksheets, $scale_factor, $uniform_worksheets, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToXlsWithHttpInfo
     *
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToXlsWithHttpInfo($name, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToXls');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/xls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($insert_blank_column_at_first !== null) {
            $queryParams['insertBlankColumnAtFirst'] = $this->apiClient->getSerializer()->toQueryValue($insert_blank_column_at_first);
        }
        // query params
        if ($minimize_the_number_of_worksheets !== null) {
            $queryParams['minimizeTheNumberOfWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($minimize_the_number_of_worksheets);
        }
        // query params
        if ($scale_factor !== null) {
            $queryParams['scaleFactor'] = $this->apiClient->getSerializer()->toQueryValue($scale_factor);
        }
        // query params
        if ($uniform_worksheets !== null) {
            $queryParams['uniformWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($uniform_worksheets);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/xls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPdfInStorageToXps
     *
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function getPdfInStorageToXps($name, $folder = null)
    {
        list($response) = $this->getPdfInStorageToXpsWithHttpInfo($name, $folder);
        return $response;
    }

    /**
     * Operation getPdfInStorageToXpsWithHttpInfo
     *
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     *
     * @param string $name The document name. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfInStorageToXpsWithHttpInfo($name, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPdfInStorageToXps');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/xps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/xps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSegment
     *
     * Read segment.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param int $segment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemResponse
     */
    public function getSegment($name, $page_number, $fragment_number, $segment_number, $storage = null, $folder = null)
    {
        list($response) = $this->getSegmentWithHttpInfo($name, $page_number, $fragment_number, $segment_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getSegmentWithHttpInfo
     *
     * Read segment.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param int $segment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSegmentWithHttpInfo($name, $page_number, $fragment_number, $segment_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSegment');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getSegment');
        }
        // verify the required parameter 'fragment_number' is set
        if ($fragment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fragment_number when calling getSegment');
        }
        // verify the required parameter 'segment_number' is set
        if ($segment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $segment_number when calling getSegment');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($fragment_number !== null) {
            $resourcePath = str_replace(
                "{" . "fragmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($fragment_number),
                $resourcePath
            );
        }
        // path params
        if ($segment_number !== null) {
            $resourcePath = str_replace(
                "{" . "segmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($segment_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSegmentTextFormat
     *
     * Read segment text format.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param int $segment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextFormatResponse
     */
    public function getSegmentTextFormat($name, $page_number, $fragment_number, $segment_number, $storage = null, $folder = null)
    {
        list($response) = $this->getSegmentTextFormatWithHttpInfo($name, $page_number, $fragment_number, $segment_number, $storage, $folder);
        return $response;
    }

    /**
     * Operation getSegmentTextFormatWithHttpInfo
     *
     * Read segment text format.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param int $segment_number  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextFormatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSegmentTextFormatWithHttpInfo($name, $page_number, $fragment_number, $segment_number, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSegmentTextFormat');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getSegmentTextFormat');
        }
        // verify the required parameter 'fragment_number' is set
        if ($fragment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fragment_number when calling getSegmentTextFormat');
        }
        // verify the required parameter 'segment_number' is set
        if ($segment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $segment_number when calling getSegmentTextFormat');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}/textformat";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($fragment_number !== null) {
            $resourcePath = str_replace(
                "{" . "fragmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($fragment_number),
                $resourcePath
            );
        }
        // path params
        if ($segment_number !== null) {
            $resourcePath = str_replace(
                "{" . "segmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($segment_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextFormatResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments/{segmentNumber}/textformat'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextFormatResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextFormatResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSegments
     *
     * Read fragment segments.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemsResponse
     */
    public function getSegments($name, $page_number, $fragment_number, $with_empty = null, $storage = null, $folder = null)
    {
        list($response) = $this->getSegmentsWithHttpInfo($name, $page_number, $fragment_number, $with_empty, $storage, $folder);
        return $response;
    }

    /**
     * Operation getSegmentsWithHttpInfo
     *
     * Read fragment segments.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param int $fragment_number  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSegmentsWithHttpInfo($name, $page_number, $fragment_number, $with_empty = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSegments');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling getSegments');
        }
        // verify the required parameter 'fragment_number' is set
        if ($fragment_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fragment_number when calling getSegments');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_empty !== null) {
            $queryParams['withEmpty'] = $this->apiClient->getSerializer()->toQueryValue($with_empty);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($fragment_number !== null) {
            $resourcePath = str_replace(
                "{" . "fragmentNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($fragment_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemsResponse',
                '/pdf/{name}/pages/{pageNumber}/fragments/{fragmentNumber}/segments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getText
     *
     * Read document text.
     *
     * @param string $name The document name. (required)
     * @param int $x  (required)
     * @param int $y  (required)
     * @param int $width  (required)
     * @param int $height  (required)
     * @param string[] $format List of formats for search. (optional)
     * @param string $regex Formats are specified as a regular expression. (optional)
     * @param bool $split_rects Split result fragments (default is true). (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextRectsResponse
     */
    public function getText($name, $x, $y, $width, $height, $format = null, $regex = null, $split_rects = null, $folder = null)
    {
        list($response) = $this->getTextWithHttpInfo($name, $x, $y, $width, $height, $format, $regex, $split_rects, $folder);
        return $response;
    }

    /**
     * Operation getTextWithHttpInfo
     *
     * Read document text.
     *
     * @param string $name The document name. (required)
     * @param int $x  (required)
     * @param int $y  (required)
     * @param int $width  (required)
     * @param int $height  (required)
     * @param string[] $format List of formats for search. (optional)
     * @param string $regex Formats are specified as a regular expression. (optional)
     * @param bool $split_rects Split result fragments (default is true). (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextRectsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTextWithHttpInfo($name, $x, $y, $width, $height, $format = null, $regex = null, $split_rects = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getText');
        }
        // verify the required parameter 'x' is set
        if ($x === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x when calling getText');
        }
        // verify the required parameter 'y' is set
        if ($y === null) {
            throw new \InvalidArgumentException('Missing the required parameter $y when calling getText');
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException('Missing the required parameter $width when calling getText');
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException('Missing the required parameter $height when calling getText');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/text";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($format)) {
            $format = $this->apiClient->getSerializer()->serializeCollection($format, 'multi', true);
        }
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($regex !== null) {
            $queryParams['regex'] = $this->apiClient->getSerializer()->toQueryValue($regex);
        }
        // query params
        if ($x !== null) {
            $queryParams['X'] = $this->apiClient->getSerializer()->toQueryValue($x);
        }
        // query params
        if ($y !== null) {
            $queryParams['Y'] = $this->apiClient->getSerializer()->toQueryValue($y);
        }
        // query params
        if ($width !== null) {
            $queryParams['Width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['Height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($split_rects !== null) {
            $queryParams['splitRects'] = $this->apiClient->getSerializer()->toQueryValue($split_rects);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextRectsResponse',
                '/pdf/{name}/text'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextRectsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextRectsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTextItems
     *
     * Read document text items.
     *
     * @param string $name  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextItemsResponse
     */
    public function getTextItems($name, $with_empty = null, $storage = null, $folder = null)
    {
        list($response) = $this->getTextItemsWithHttpInfo($name, $with_empty, $storage, $folder);
        return $response;
    }

    /**
     * Operation getTextItemsWithHttpInfo
     *
     * Read document text items.
     *
     * @param string $name  (required)
     * @param string $with_empty  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTextItemsWithHttpInfo($name, $with_empty = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTextItems');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/textItems";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($with_empty !== null) {
            $queryParams['withEmpty'] = $this->apiClient->getSerializer()->toQueryValue($with_empty);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextItemsResponse',
                '/pdf/{name}/textItems'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWordsPerPage
     *
     * Get number of words per document page.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\WordCountResponse
     */
    public function getWordsPerPage($name, $storage = null, $folder = null)
    {
        list($response) = $this->getWordsPerPageWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation getWordsPerPageWithHttpInfo
     *
     * Get number of words per document page.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\WordCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWordsPerPageWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getWordsPerPage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/wordCount";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\WordCountResponse',
                '/pdf/{name}/pages/wordCount'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\WordCountResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\WordCountResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postAppendDocument
     *
     * Append document to existing one.
     *
     * @param string $name The original document name. (required)
     * @param \Aspose\PDF\Model\AppendDocument $append_document with the append document data. (optional)
     * @param string $append_file Append file server path. (optional)
     * @param int $start_page Appending start page. (optional, default to 0)
     * @param int $end_page Appending end page. (optional, default to 0)
     * @param string $storage The documents storage. (optional)
     * @param string $folder The original document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentResponse
     */
    public function postAppendDocument($name, $append_document = null, $append_file = null, $start_page = '0', $end_page = '0', $storage = null, $folder = null)
    {
        list($response) = $this->postAppendDocumentWithHttpInfo($name, $append_document, $append_file, $start_page, $end_page, $storage, $folder);
        return $response;
    }

    /**
     * Operation postAppendDocumentWithHttpInfo
     *
     * Append document to existing one.
     *
     * @param string $name The original document name. (required)
     * @param \Aspose\PDF\Model\AppendDocument $append_document with the append document data. (optional)
     * @param string $append_file Append file server path. (optional)
     * @param int $start_page Appending start page. (optional, default to 0)
     * @param int $end_page Appending end page. (optional, default to 0)
     * @param string $storage The documents storage. (optional)
     * @param string $folder The original document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppendDocumentWithHttpInfo($name, $append_document = null, $append_file = null, $start_page = '0', $end_page = '0', $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAppendDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/appendDocument";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($append_file !== null) {
            $queryParams['appendFile'] = $this->apiClient->getSerializer()->toQueryValue($append_file);
        }
        // query params
        if ($start_page !== null) {
            $queryParams['startPage'] = $this->apiClient->getSerializer()->toQueryValue($start_page);
        }
        // query params
        if ($end_page !== null) {
            $queryParams['endPage'] = $this->apiClient->getSerializer()->toQueryValue($end_page);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($append_document)) {
            $_tempBody = $append_document;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentResponse',
                '/pdf/{name}/appendDocument'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCreateField
     *
     * Create field.
     *
     * @param string $name The document name. (required)
     * @param int $page Document page number. (required)
     * @param \Aspose\PDF\Model\Field $field with the field data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function postCreateField($name, $page, $field = null, $storage = null, $folder = null)
    {
        list($response) = $this->postCreateFieldWithHttpInfo($name, $page, $field, $storage, $folder);
        return $response;
    }

    /**
     * Operation postCreateFieldWithHttpInfo
     *
     * Create field.
     *
     * @param string $name The document name. (required)
     * @param int $page Document page number. (required)
     * @param \Aspose\PDF\Model\Field $field with the field data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateFieldWithHttpInfo($name, $page, $field = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postCreateField');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling postCreateField');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($field)) {
            $_tempBody = $field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDocumentReplaceText
     *
     * Document's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentTextReplaceResponse
     */
    public function postDocumentReplaceText($name, $text_replace, $storage = null, $folder = null)
    {
        list($response) = $this->postDocumentReplaceTextWithHttpInfo($name, $text_replace, $storage, $folder);
        return $response;
    }

    /**
     * Operation postDocumentReplaceTextWithHttpInfo
     *
     * Document's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentTextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDocumentReplaceTextWithHttpInfo($name, $text_replace, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postDocumentReplaceText');
        }
        // verify the required parameter 'text_replace' is set
        if ($text_replace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace when calling postDocumentReplaceText');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/replaceText";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace)) {
            $_tempBody = $text_replace;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentTextReplaceResponse',
                '/pdf/{name}/replaceText'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentTextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentTextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDocumentReplaceTextList
     *
     * Document's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentTextReplaceResponse
     */
    public function postDocumentReplaceTextList($name, $text_replace_list_request, $storage = null, $folder = null)
    {
        list($response) = $this->postDocumentReplaceTextListWithHttpInfo($name, $text_replace_list_request, $storage, $folder);
        return $response;
    }

    /**
     * Operation postDocumentReplaceTextListWithHttpInfo
     *
     * Document's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentTextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDocumentReplaceTextListWithHttpInfo($name, $text_replace_list_request, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postDocumentReplaceTextList');
        }
        // verify the required parameter 'text_replace_list_request' is set
        if ($text_replace_list_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace_list_request when calling postDocumentReplaceTextList');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/replaceTextList";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace_list_request)) {
            $_tempBody = $text_replace_list_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentTextReplaceResponse',
                '/pdf/{name}/replaceTextList'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentTextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentTextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDocumentTextReplace
     *
     * Document's replace text method.
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextReplaceResponse
     */
    public function postDocumentTextReplace($name, $text_replace, $storage = null, $folder = null)
    {
        list($response) = $this->postDocumentTextReplaceWithHttpInfo($name, $text_replace, $storage, $folder);
        return $response;
    }

    /**
     * Operation postDocumentTextReplaceWithHttpInfo
     *
     * Document's replace text method.
     *
     * @param string $name  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDocumentTextReplaceWithHttpInfo($name, $text_replace, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postDocumentTextReplace');
        }
        // verify the required parameter 'text_replace' is set
        if ($text_replace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace when calling postDocumentTextReplace');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/text/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace)) {
            $_tempBody = $text_replace;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextReplaceResponse',
                '/pdf/{name}/text/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postMovePage
     *
     * Move page to new position.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $new_index The new page position/index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function postMovePage($name, $page_number, $new_index, $storage = null, $folder = null)
    {
        list($response) = $this->postMovePageWithHttpInfo($name, $page_number, $new_index, $storage, $folder);
        return $response;
    }

    /**
     * Operation postMovePageWithHttpInfo
     *
     * Move page to new position.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $new_index The new page position/index. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMovePageWithHttpInfo($name, $page_number, $new_index, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postMovePage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postMovePage');
        }
        // verify the required parameter 'new_index' is set
        if ($new_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_index when calling postMovePage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/movePage";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($new_index !== null) {
            $queryParams['newIndex'] = $this->apiClient->getSerializer()->toQueryValue($new_index);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}/movePage'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postOptimizeDocument
     *
     * Optimize document.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\OptimizeOptions $options The optimization options. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function postOptimizeDocument($name, $options = null, $storage = null, $folder = null)
    {
        list($response) = $this->postOptimizeDocumentWithHttpInfo($name, $options, $storage, $folder);
        return $response;
    }

    /**
     * Operation postOptimizeDocumentWithHttpInfo
     *
     * Optimize document.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\OptimizeOptions $options The optimization options. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOptimizeDocumentWithHttpInfo($name, $options = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postOptimizeDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/optimize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/optimize'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postPageReplaceText
     *
     * Page's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\PageTextReplaceResponse
     */
    public function postPageReplaceText($name, $page_number, $text_replace, $storage = null, $folder = null)
    {
        list($response) = $this->postPageReplaceTextWithHttpInfo($name, $page_number, $text_replace, $storage, $folder);
        return $response;
    }

    /**
     * Operation postPageReplaceTextWithHttpInfo
     *
     * Page's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceRequest $text_replace  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\PageTextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPageReplaceTextWithHttpInfo($name, $page_number, $text_replace, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postPageReplaceText');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postPageReplaceText');
        }
        // verify the required parameter 'text_replace' is set
        if ($text_replace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace when calling postPageReplaceText');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/replaceText";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace)) {
            $_tempBody = $text_replace;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\PageTextReplaceResponse',
                '/pdf/{name}/pages/{pageNumber}/replaceText'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\PageTextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\PageTextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postPageReplaceTextList
     *
     * Page's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\PageTextReplaceResponse
     */
    public function postPageReplaceTextList($name, $page_number, $text_replace_list_request, $storage = null, $folder = null)
    {
        list($response) = $this->postPageReplaceTextListWithHttpInfo($name, $page_number, $text_replace_list_request, $storage, $folder);
        return $response;
    }

    /**
     * Operation postPageReplaceTextListWithHttpInfo
     *
     * Page's replace text method. Deprecated
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\PageTextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPageReplaceTextListWithHttpInfo($name, $page_number, $text_replace_list_request, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postPageReplaceTextList');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postPageReplaceTextList');
        }
        // verify the required parameter 'text_replace_list_request' is set
        if ($text_replace_list_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace_list_request when calling postPageReplaceTextList');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/replaceTextList";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace_list_request)) {
            $_tempBody = $text_replace_list_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\PageTextReplaceResponse',
                '/pdf/{name}/pages/{pageNumber}/replaceTextList'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\PageTextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\PageTextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postPageTextReplace
     *
     * Page's replace text method.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\TextReplaceResponse
     */
    public function postPageTextReplace($name, $page_number, $text_replace_list_request, $storage = null, $folder = null)
    {
        list($response) = $this->postPageTextReplaceWithHttpInfo($name, $page_number, $text_replace_list_request, $storage, $folder);
        return $response;
    }

    /**
     * Operation postPageTextReplaceWithHttpInfo
     *
     * Page's replace text method.
     *
     * @param string $name  (required)
     * @param int $page_number  (required)
     * @param \Aspose\PDF\Model\TextReplaceListRequest $text_replace_list_request  (required)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\TextReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPageTextReplaceWithHttpInfo($name, $page_number, $text_replace_list_request, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postPageTextReplace');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postPageTextReplace');
        }
        // verify the required parameter 'text_replace_list_request' is set
        if ($text_replace_list_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text_replace_list_request when calling postPageTextReplace');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/text/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($text_replace_list_request)) {
            $_tempBody = $text_replace_list_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\TextReplaceResponse',
                '/pdf/{name}/pages/{pageNumber}/text/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\TextReplaceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\TextReplaceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postReplaceImage
     *
     * Replace document image.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $image_number The image number. (required)
     * @param string $image_file Path to image file if specified. Request content is used otherwise. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param \SplFileObject $image Image file. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\ImageResponse
     */
    public function postReplaceImage($name, $page_number, $image_number, $image_file = null, $storage = null, $folder = null, $image = null)
    {
        list($response) = $this->postReplaceImageWithHttpInfo($name, $page_number, $image_number, $image_file, $storage, $folder, $image);
        return $response;
    }

    /**
     * Operation postReplaceImageWithHttpInfo
     *
     * Replace document image.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param int $image_number The image number. (required)
     * @param string $image_file Path to image file if specified. Request content is used otherwise. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param \SplFileObject $image Image file. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\ImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postReplaceImageWithHttpInfo($name, $page_number, $image_number, $image_file = null, $storage = null, $folder = null, $image = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postReplaceImage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postReplaceImage');
        }
        // verify the required parameter 'image_number' is set
        if ($image_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_number when calling postReplaceImage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/images/{imageNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($image_file !== null) {
            $queryParams['imageFile'] = $this->apiClient->getSerializer()->toQueryValue($image_file);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // path params
        if ($image_number !== null) {
            $resourcePath = str_replace(
                "{" . "imageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_number),
                $resourcePath
            );
        }
        // form params
        if ($image !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['image'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($image));
            } else {
                $formParams['image'] = '@' . $this->apiClient->getSerializer()->toFormValue($image);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\ImageResponse',
                '/pdf/{name}/pages/{pageNumber}/images/{imageNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\ImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\ImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postSignDocument
     *
     * Sign document.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\Signature $signature Signature object containing signature data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function postSignDocument($name, $signature = null, $storage = null, $folder = null)
    {
        list($response) = $this->postSignDocumentWithHttpInfo($name, $signature, $storage, $folder);
        return $response;
    }

    /**
     * Operation postSignDocumentWithHttpInfo
     *
     * Sign document.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\Signature $signature Signature object containing signature data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignDocumentWithHttpInfo($name, $signature = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSignDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/sign";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($signature)) {
            $_tempBody = $signature;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/sign'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postSignPage
     *
     * Sign page.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param \Aspose\PDF\Model\Signature $signature Signature object containing signature data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function postSignPage($name, $page_number, $signature = null, $storage = null, $folder = null)
    {
        list($response) = $this->postSignPageWithHttpInfo($name, $page_number, $signature, $storage, $folder);
        return $response;
    }

    /**
     * Operation postSignPageWithHttpInfo
     *
     * Sign page.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param \Aspose\PDF\Model\Signature $signature Signature object containing signature data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSignPageWithHttpInfo($name, $page_number, $signature = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSignPage');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling postSignPage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/sign";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($signature)) {
            $_tempBody = $signature;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}/sign'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postSplitDocument
     *
     * Split document to parts.
     *
     * @param string $name Document name. (required)
     * @param string $format Resulting documents format. (optional)
     * @param int $from Start page if defined. (optional)
     * @param int $to End page if defined. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SplitResultResponse
     */
    public function postSplitDocument($name, $format = null, $from = null, $to = null, $storage = null, $folder = null)
    {
        list($response) = $this->postSplitDocumentWithHttpInfo($name, $format, $from, $to, $storage, $folder);
        return $response;
    }

    /**
     * Operation postSplitDocumentWithHttpInfo
     *
     * Split document to parts.
     *
     * @param string $name Document name. (required)
     * @param string $format Resulting documents format. (optional)
     * @param int $from Start page if defined. (optional)
     * @param int $to End page if defined. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SplitResultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSplitDocumentWithHttpInfo($name, $format = null, $from = null, $to = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSplitDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/split";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SplitResultResponse',
                '/pdf/{name}/split'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SplitResultResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SplitResultResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putAddNewPage
     *
     * Add new page to end of the document.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentPagesResponse
     */
    public function putAddNewPage($name, $storage = null, $folder = null)
    {
        list($response) = $this->putAddNewPageWithHttpInfo($name, $storage, $folder);
        return $response;
    }

    /**
     * Operation putAddNewPageWithHttpInfo
     *
     * Add new page to end of the document.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentPagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAddNewPageWithHttpInfo($name, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putAddNewPage');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentPagesResponse',
                '/pdf/{name}/pages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentPagesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentPagesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putAddParagraph
     *
     * Add text to PDF document page. Deprecated
     *
     * @param string $name Name of the document to which text should be added. (required)
     * @param int $page_number Number of page (starting with 1) to which text should be added. (required)
     * @param \Aspose\PDF\Model\Paragraph $paragraph Paragraph data. (optional)
     * @param string $storage File storage to be used. (optional)
     * @param string $folder Document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putAddParagraph($name, $page_number, $paragraph = null, $storage = null, $folder = null)
    {
        list($response) = $this->putAddParagraphWithHttpInfo($name, $page_number, $paragraph, $storage, $folder);
        return $response;
    }

    /**
     * Operation putAddParagraphWithHttpInfo
     *
     * Add text to PDF document page. Deprecated
     *
     * @param string $name Name of the document to which text should be added. (required)
     * @param int $page_number Number of page (starting with 1) to which text should be added. (required)
     * @param \Aspose\PDF\Model\Paragraph $paragraph Paragraph data. (optional)
     * @param string $storage File storage to be used. (optional)
     * @param string $folder Document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAddParagraphWithHttpInfo($name, $page_number, $paragraph = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putAddParagraph');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling putAddParagraph');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/paragraph";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($paragraph)) {
            $_tempBody = $paragraph;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}/paragraph'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putAddText
     *
     * Add text to PDF document page.
     *
     * @param string $name The document name. (required)
     * @param int $page_number Number of page (starting from 1). (required)
     * @param \Aspose\PDF\Model\Paragraph $paragraph Paragraph data. (optional)
     * @param string $folder Document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putAddText($name, $page_number, $paragraph = null, $folder = null)
    {
        list($response) = $this->putAddTextWithHttpInfo($name, $page_number, $paragraph, $folder);
        return $response;
    }

    /**
     * Operation putAddTextWithHttpInfo
     *
     * Add text to PDF document page.
     *
     * @param string $name The document name. (required)
     * @param int $page_number Number of page (starting from 1). (required)
     * @param \Aspose\PDF\Model\Paragraph $paragraph Paragraph data. (optional)
     * @param string $folder Document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAddTextWithHttpInfo($name, $page_number, $paragraph = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putAddText');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling putAddText');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/text";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($paragraph)) {
            $_tempBody = $paragraph;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}/text'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putConvertDocument
     *
     * Convert document from request content to format specified.
     *
     * @param string $format The format to convert. (optional)
     * @param string $url  (optional)
     * @param string $out_path Path to save result (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putConvertDocument($format = null, $url = null, $out_path = null, $file = null)
    {
        list($response) = $this->putConvertDocumentWithHttpInfo($format, $url, $out_path, $file);
        return $response;
    }

    /**
     * Operation putConvertDocumentWithHttpInfo
     *
     * Convert document from request content to format specified.
     *
     * @param string $format The format to convert. (optional)
     * @param string $url  (optional)
     * @param string $out_path Path to save result (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConvertDocumentWithHttpInfo($format = null, $url = null, $out_path = null, $file = null)
    {
        // parse inputs
        $resourcePath = "/pdf/convert";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['multipart/form-data']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCreate
     *
     * Upload a specific file
     *
     * @param string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param \SplFileObject $file File to upload (required)
     * @param string $version_id Source file&#39;s version (optional)
     * @param string $storage User&#39;s storage name (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putCreate($path, $file, $version_id = null, $storage = null)
    {
        list($response) = $this->putCreateWithHttpInfo($path, $file, $version_id, $storage);
        return $response;
    }

    /**
     * Operation putCreateWithHttpInfo
     *
     * Upload a specific file
     *
     * @param string $path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param \SplFileObject $file File to upload (required)
     * @param string $version_id Source file&#39;s version (optional)
     * @param string $storage User&#39;s storage name (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCreateWithHttpInfo($path, $file, $version_id = null, $storage = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling putCreate');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling putCreate');
        }
        // parse inputs
        $resourcePath = "/storage/file";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        // query params
        if ($version_id !== null) {
            $queryParams['versionId'] = $this->apiClient->getSerializer()->toQueryValue($version_id);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['File'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['File'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/storage/file'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCreateDocument
     *
     * Create new document.
     *
     * @param string $name The new document name. (required)
     * @param string $template_file The template file server path if defined. (optional)
     * @param string $data_file The data file path (for xml template only). (optional)
     * @param string $template_type The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The new document folder. (optional)
     * @param string $url The url of web page if defined. (optional)
     * @param bool $fit_size Draw a margin around content in resulting pdf. (optional, default to false)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentResponse
     */
    public function putCreateDocument($name, $template_file = null, $data_file = null, $template_type = null, $storage = null, $folder = null, $url = null, $fit_size = 'false')
    {
        list($response) = $this->putCreateDocumentWithHttpInfo($name, $template_file, $data_file, $template_type, $storage, $folder, $url, $fit_size);
        return $response;
    }

    /**
     * Operation putCreateDocumentWithHttpInfo
     *
     * Create new document.
     *
     * @param string $name The new document name. (required)
     * @param string $template_file The template file server path if defined. (optional)
     * @param string $data_file The data file path (for xml template only). (optional)
     * @param string $template_type The template type, can be xml, html, bmp, jpg, png, tiff, emf, cgm, tex. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The new document folder. (optional)
     * @param string $url The url of web page if defined. (optional)
     * @param bool $fit_size Draw a margin around content in resulting pdf. (optional, default to false)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCreateDocumentWithHttpInfo($name, $template_file = null, $data_file = null, $template_type = null, $storage = null, $folder = null, $url = null, $fit_size = 'false')
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putCreateDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($template_file !== null) {
            $queryParams['templateFile'] = $this->apiClient->getSerializer()->toQueryValue($template_file);
        }
        // query params
        if ($data_file !== null) {
            $queryParams['dataFile'] = $this->apiClient->getSerializer()->toQueryValue($data_file);
        }
        // query params
        if ($template_type !== null) {
            $queryParams['templateType'] = $this->apiClient->getSerializer()->toQueryValue($template_type);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = $this->apiClient->getSerializer()->toQueryValue($url);
        }
        // query params
        if ($fit_size !== null) {
            $queryParams['fitSize'] = $this->apiClient->getSerializer()->toQueryValue($fit_size);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentResponse',
                '/pdf/{name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCreateDocumentFromImages
     *
     * Create new document from images.
     *
     * @param string $name The new document name. (required)
     * @param \Aspose\PDF\Model\ImagesListRequest $images The images file paths set. (optional)
     * @param bool $ocr To create OCR layer for image or not. (optional, default to false)
     * @param string $ocr_lang The language which is defined for OCR engine. Default is eng. (optional, default to eng)
     * @param string $storage The document storage. (optional)
     * @param string $folder The new document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentResponse
     */
    public function putCreateDocumentFromImages($name, $images = null, $ocr = 'false', $ocr_lang = 'eng', $storage = null, $folder = null)
    {
        list($response) = $this->putCreateDocumentFromImagesWithHttpInfo($name, $images, $ocr, $ocr_lang, $storage, $folder);
        return $response;
    }

    /**
     * Operation putCreateDocumentFromImagesWithHttpInfo
     *
     * Create new document from images.
     *
     * @param string $name The new document name. (required)
     * @param \Aspose\PDF\Model\ImagesListRequest $images The images file paths set. (optional)
     * @param bool $ocr To create OCR layer for image or not. (optional, default to false)
     * @param string $ocr_lang The language which is defined for OCR engine. Default is eng. (optional, default to eng)
     * @param string $storage The document storage. (optional)
     * @param string $folder The new document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCreateDocumentFromImagesWithHttpInfo($name, $images = null, $ocr = 'false', $ocr_lang = 'eng', $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putCreateDocumentFromImages');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fromimages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($ocr !== null) {
            $queryParams['ocr'] = $this->apiClient->getSerializer()->toQueryValue($ocr);
        }
        // query params
        if ($ocr_lang !== null) {
            $queryParams['ocrLang'] = $this->apiClient->getSerializer()->toQueryValue($ocr_lang);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($images)) {
            $_tempBody = $images;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentResponse',
                '/pdf/{name}/fromimages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putDocumentSaveAsTiff
     *
     * Save document as Tiff image.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\TiffExportOptions $export_options with tiff export options. (optional)
     * @param string $result_file The resulting file. (optional)
     * @param double $brightness The image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putDocumentSaveAsTiff($name, $export_options = null, $result_file = null, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $storage = null, $folder = null)
    {
        list($response) = $this->putDocumentSaveAsTiffWithHttpInfo($name, $export_options, $result_file, $brightness, $compression, $color_depth, $left_margin, $right_margin, $top_margin, $bottom_margin, $orientation, $skip_blank_pages, $width, $height, $x_resolution, $y_resolution, $page_index, $page_count, $storage, $folder);
        return $response;
    }

    /**
     * Operation putDocumentSaveAsTiffWithHttpInfo
     *
     * Save document as Tiff image.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\TiffExportOptions $export_options with tiff export options. (optional)
     * @param string $result_file The resulting file. (optional)
     * @param double $brightness The image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDocumentSaveAsTiffWithHttpInfo($name, $export_options = null, $result_file = null, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putDocumentSaveAsTiff');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/SaveAs/tiff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($result_file !== null) {
            $queryParams['resultFile'] = $this->apiClient->getSerializer()->toQueryValue($result_file);
        }
        // query params
        if ($brightness !== null) {
            $queryParams['brightness'] = $this->apiClient->getSerializer()->toQueryValue($brightness);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($color_depth !== null) {
            $queryParams['colorDepth'] = $this->apiClient->getSerializer()->toQueryValue($color_depth);
        }
        // query params
        if ($left_margin !== null) {
            $queryParams['leftMargin'] = $this->apiClient->getSerializer()->toQueryValue($left_margin);
        }
        // query params
        if ($right_margin !== null) {
            $queryParams['rightMargin'] = $this->apiClient->getSerializer()->toQueryValue($right_margin);
        }
        // query params
        if ($top_margin !== null) {
            $queryParams['topMargin'] = $this->apiClient->getSerializer()->toQueryValue($top_margin);
        }
        // query params
        if ($bottom_margin !== null) {
            $queryParams['bottomMargin'] = $this->apiClient->getSerializer()->toQueryValue($bottom_margin);
        }
        // query params
        if ($orientation !== null) {
            $queryParams['orientation'] = $this->apiClient->getSerializer()->toQueryValue($orientation);
        }
        // query params
        if ($skip_blank_pages !== null) {
            $queryParams['skipBlankPages'] = $this->apiClient->getSerializer()->toQueryValue($skip_blank_pages);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($x_resolution !== null) {
            $queryParams['xResolution'] = $this->apiClient->getSerializer()->toQueryValue($x_resolution);
        }
        // query params
        if ($y_resolution !== null) {
            $queryParams['yResolution'] = $this->apiClient->getSerializer()->toQueryValue($y_resolution);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($page_index);
        }
        // query params
        if ($page_count !== null) {
            $queryParams['pageCount'] = $this->apiClient->getSerializer()->toQueryValue($page_count);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($export_options)) {
            $_tempBody = $export_options;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/SaveAs/tiff'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putMergeDocuments
     *
     * Merge a list of documents.
     *
     * @param string $name Resulting documen name. (required)
     * @param \Aspose\PDF\Model\MergeDocuments $merge_documents with a list of documents. (optional)
     * @param string $storage Resulting document storage. (optional)
     * @param string $folder Resulting document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentResponse
     */
    public function putMergeDocuments($name, $merge_documents = null, $storage = null, $folder = null)
    {
        list($response) = $this->putMergeDocumentsWithHttpInfo($name, $merge_documents, $storage, $folder);
        return $response;
    }

    /**
     * Operation putMergeDocumentsWithHttpInfo
     *
     * Merge a list of documents.
     *
     * @param string $name Resulting documen name. (required)
     * @param \Aspose\PDF\Model\MergeDocuments $merge_documents with a list of documents. (optional)
     * @param string $storage Resulting document storage. (optional)
     * @param string $folder Resulting document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putMergeDocumentsWithHttpInfo($name, $merge_documents = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putMergeDocuments');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/merge";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($merge_documents)) {
            $_tempBody = $merge_documents;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentResponse',
                '/pdf/{name}/merge'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPageAddStamp
     *
     * Add page stamp.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param \Aspose\PDF\Model\Stamp $stamp with data. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putPageAddStamp($name, $page_number, $stamp, $storage = null, $folder = null)
    {
        list($response) = $this->putPageAddStampWithHttpInfo($name, $page_number, $stamp, $storage, $folder);
        return $response;
    }

    /**
     * Operation putPageAddStampWithHttpInfo
     *
     * Add page stamp.
     *
     * @param string $name The document name. (required)
     * @param int $page_number The page number. (required)
     * @param \Aspose\PDF\Model\Stamp $stamp with data. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPageAddStampWithHttpInfo($name, $page_number, $stamp, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPageAddStamp');
        }
        // verify the required parameter 'page_number' is set
        if ($page_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_number when calling putPageAddStamp');
        }
        // verify the required parameter 'stamp' is set
        if ($stamp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stamp when calling putPageAddStamp');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/pages/{pageNumber}/stamp";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($page_number !== null) {
            $resourcePath = str_replace(
                "{" . "pageNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_number),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($stamp)) {
            $_tempBody = $stamp;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/pages/{pageNumber}/stamp'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToDoc
     *
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToDoc($out_path, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $file = null)
    {
        list($response) = $this->putPdfInRequestToDocWithHttpInfo($out_path, $add_return_to_line_end, $format, $image_resolution_x, $image_resolution_y, $max_distance_between_text_lines, $mode, $recognize_bullets, $relative_horizontal_proximity, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToDocWithHttpInfo
     *
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToDocWithHttpInfo($out_path, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToDoc');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/doc";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($add_return_to_line_end !== null) {
            $queryParams['addReturnToLineEnd'] = $this->apiClient->getSerializer()->toQueryValue($add_return_to_line_end);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($image_resolution_x !== null) {
            $queryParams['imageResolutionX'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_x);
        }
        // query params
        if ($image_resolution_y !== null) {
            $queryParams['imageResolutionY'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_y);
        }
        // query params
        if ($max_distance_between_text_lines !== null) {
            $queryParams['maxDistanceBetweenTextLines'] = $this->apiClient->getSerializer()->toQueryValue($max_distance_between_text_lines);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = $this->apiClient->getSerializer()->toQueryValue($mode);
        }
        // query params
        if ($recognize_bullets !== null) {
            $queryParams['recognizeBullets'] = $this->apiClient->getSerializer()->toQueryValue($recognize_bullets);
        }
        // query params
        if ($relative_horizontal_proximity !== null) {
            $queryParams['relativeHorizontalProximity'] = $this->apiClient->getSerializer()->toQueryValue($relative_horizontal_proximity);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/doc'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToPdfA
     *
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param string $type Type of PdfA format. (required)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToPdfA($out_path, $type, $file = null)
    {
        list($response) = $this->putPdfInRequestToPdfAWithHttpInfo($out_path, $type, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToPdfAWithHttpInfo
     *
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param string $type Type of PdfA format. (required)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToPdfAWithHttpInfo($out_path, $type, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToPdfA');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling putPdfInRequestToPdfA');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/pdfa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/pdfa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToSvg
     *
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToSvg($out_path, $compress_output_to_zip_archive = null, $file = null)
    {
        list($response) = $this->putPdfInRequestToSvgWithHttpInfo($out_path, $compress_output_to_zip_archive, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToSvgWithHttpInfo
     *
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToSvgWithHttpInfo($out_path, $compress_output_to_zip_archive = null, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToSvg');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/svg";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($compress_output_to_zip_archive !== null) {
            $queryParams['compressOutputToZipArchive'] = $this->apiClient->getSerializer()->toQueryValue($compress_output_to_zip_archive);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/svg'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToTiff
     *
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToTiff($out_path, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $file = null)
    {
        list($response) = $this->putPdfInRequestToTiffWithHttpInfo($out_path, $brightness, $compression, $color_depth, $left_margin, $right_margin, $top_margin, $bottom_margin, $orientation, $skip_blank_pages, $width, $height, $x_resolution, $y_resolution, $page_index, $page_count, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToTiffWithHttpInfo
     *
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToTiffWithHttpInfo($out_path, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToTiff');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/tiff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($brightness !== null) {
            $queryParams['brightness'] = $this->apiClient->getSerializer()->toQueryValue($brightness);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($color_depth !== null) {
            $queryParams['colorDepth'] = $this->apiClient->getSerializer()->toQueryValue($color_depth);
        }
        // query params
        if ($left_margin !== null) {
            $queryParams['leftMargin'] = $this->apiClient->getSerializer()->toQueryValue($left_margin);
        }
        // query params
        if ($right_margin !== null) {
            $queryParams['rightMargin'] = $this->apiClient->getSerializer()->toQueryValue($right_margin);
        }
        // query params
        if ($top_margin !== null) {
            $queryParams['topMargin'] = $this->apiClient->getSerializer()->toQueryValue($top_margin);
        }
        // query params
        if ($bottom_margin !== null) {
            $queryParams['bottomMargin'] = $this->apiClient->getSerializer()->toQueryValue($bottom_margin);
        }
        // query params
        if ($orientation !== null) {
            $queryParams['orientation'] = $this->apiClient->getSerializer()->toQueryValue($orientation);
        }
        // query params
        if ($skip_blank_pages !== null) {
            $queryParams['skipBlankPages'] = $this->apiClient->getSerializer()->toQueryValue($skip_blank_pages);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($x_resolution !== null) {
            $queryParams['xResolution'] = $this->apiClient->getSerializer()->toQueryValue($x_resolution);
        }
        // query params
        if ($y_resolution !== null) {
            $queryParams['yResolution'] = $this->apiClient->getSerializer()->toQueryValue($y_resolution);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($page_index);
        }
        // query params
        if ($page_count !== null) {
            $queryParams['pageCount'] = $this->apiClient->getSerializer()->toQueryValue($page_count);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/tiff'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToXls
     *
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToXls($out_path, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $file = null)
    {
        list($response) = $this->putPdfInRequestToXlsWithHttpInfo($out_path, $insert_blank_column_at_first, $minimize_the_number_of_worksheets, $scale_factor, $uniform_worksheets, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToXlsWithHttpInfo
     *
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToXlsWithHttpInfo($out_path, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToXls');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/xls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($insert_blank_column_at_first !== null) {
            $queryParams['insertBlankColumnAtFirst'] = $this->apiClient->getSerializer()->toQueryValue($insert_blank_column_at_first);
        }
        // query params
        if ($minimize_the_number_of_worksheets !== null) {
            $queryParams['minimizeTheNumberOfWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($minimize_the_number_of_worksheets);
        }
        // query params
        if ($scale_factor !== null) {
            $queryParams['scaleFactor'] = $this->apiClient->getSerializer()->toQueryValue($scale_factor);
        }
        // query params
        if ($uniform_worksheets !== null) {
            $queryParams['uniformWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($uniform_worksheets);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/xls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInRequestToXps
     *
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInRequestToXps($out_path, $file = null)
    {
        list($response) = $this->putPdfInRequestToXpsWithHttpInfo($out_path, $file);
        return $response;
    }

    /**
     * Operation putPdfInRequestToXpsWithHttpInfo
     *
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     *
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param \SplFileObject $file A file to be converted. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInRequestToXpsWithHttpInfo($out_path, $file = null)
    {
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInRequestToXps');
        }
        // parse inputs
        $resourcePath = "/pdf/convert/xps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/convert/xps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToDoc
     *
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToDoc($name, $out_path, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $folder = null)
    {
        list($response) = $this->putPdfInStorageToDocWithHttpInfo($name, $out_path, $add_return_to_line_end, $format, $image_resolution_x, $image_resolution_y, $max_distance_between_text_lines, $mode, $recognize_bullets, $relative_horizontal_proximity, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToDocWithHttpInfo
     *
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param bool $add_return_to_line_end Add return to line end. (optional)
     * @param string $format Allows to specify .doc or .docx file format. (optional)
     * @param int $image_resolution_x Image resolution X. (optional)
     * @param int $image_resolution_y Image resolution Y. (optional)
     * @param int $max_distance_between_text_lines Max distance between text lines. (optional)
     * @param string $mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param bool $recognize_bullets Recognize bullets. (optional)
     * @param double $relative_horizontal_proximity Relative horizontal proximity. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToDocWithHttpInfo($name, $out_path, $add_return_to_line_end = null, $format = null, $image_resolution_x = null, $image_resolution_y = null, $max_distance_between_text_lines = null, $mode = null, $recognize_bullets = null, $relative_horizontal_proximity = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToDoc');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToDoc');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/doc";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($add_return_to_line_end !== null) {
            $queryParams['addReturnToLineEnd'] = $this->apiClient->getSerializer()->toQueryValue($add_return_to_line_end);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }
        // query params
        if ($image_resolution_x !== null) {
            $queryParams['imageResolutionX'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_x);
        }
        // query params
        if ($image_resolution_y !== null) {
            $queryParams['imageResolutionY'] = $this->apiClient->getSerializer()->toQueryValue($image_resolution_y);
        }
        // query params
        if ($max_distance_between_text_lines !== null) {
            $queryParams['maxDistanceBetweenTextLines'] = $this->apiClient->getSerializer()->toQueryValue($max_distance_between_text_lines);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = $this->apiClient->getSerializer()->toQueryValue($mode);
        }
        // query params
        if ($recognize_bullets !== null) {
            $queryParams['recognizeBullets'] = $this->apiClient->getSerializer()->toQueryValue($recognize_bullets);
        }
        // query params
        if ($relative_horizontal_proximity !== null) {
            $queryParams['relativeHorizontalProximity'] = $this->apiClient->getSerializer()->toQueryValue($relative_horizontal_proximity);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/doc'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToPdfA
     *
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param string $type Type of PdfA format. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToPdfA($name, $out_path, $type, $folder = null)
    {
        list($response) = $this->putPdfInStorageToPdfAWithHttpInfo($name, $out_path, $type, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToPdfAWithHttpInfo
     *
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param string $type Type of PdfA format. (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToPdfAWithHttpInfo($name, $out_path, $type, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToPdfA');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToPdfA');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling putPdfInStorageToPdfA');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/pdfa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/pdfa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToSvg
     *
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToSvg($name, $out_path, $compress_output_to_zip_archive = null, $folder = null)
    {
        list($response) = $this->putPdfInStorageToSvgWithHttpInfo($name, $out_path, $compress_output_to_zip_archive, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToSvgWithHttpInfo
     *
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param bool $compress_output_to_zip_archive Specifies whether output will be created as one zip-archive. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToSvgWithHttpInfo($name, $out_path, $compress_output_to_zip_archive = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToSvg');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToSvg');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/svg";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($compress_output_to_zip_archive !== null) {
            $queryParams['compressOutputToZipArchive'] = $this->apiClient->getSerializer()->toQueryValue($compress_output_to_zip_archive);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/svg'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToTiff
     *
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToTiff($name, $out_path, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $folder = null)
    {
        list($response) = $this->putPdfInStorageToTiffWithHttpInfo($name, $out_path, $brightness, $compression, $color_depth, $left_margin, $right_margin, $top_margin, $bottom_margin, $orientation, $skip_blank_pages, $width, $height, $x_resolution, $y_resolution, $page_index, $page_count, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToTiffWithHttpInfo
     *
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param double $brightness Image brightness. (optional)
     * @param string $compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param string $color_depth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param int $left_margin Left image margin. (optional)
     * @param int $right_margin Right image margin. (optional)
     * @param int $top_margin Top image margin. (optional)
     * @param int $bottom_margin Bottom image margin. (optional)
     * @param string $orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param bool $skip_blank_pages Skip blank pages flag. (optional)
     * @param int $width Image width. (optional)
     * @param int $height Image height. (optional)
     * @param int $x_resolution Horizontal resolution. (optional)
     * @param int $y_resolution Vertical resolution. (optional)
     * @param int $page_index Start page to export. (optional)
     * @param int $page_count Number of pages to export. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToTiffWithHttpInfo($name, $out_path, $brightness = null, $compression = null, $color_depth = null, $left_margin = null, $right_margin = null, $top_margin = null, $bottom_margin = null, $orientation = null, $skip_blank_pages = null, $width = null, $height = null, $x_resolution = null, $y_resolution = null, $page_index = null, $page_count = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToTiff');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToTiff');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/tiff";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($brightness !== null) {
            $queryParams['brightness'] = $this->apiClient->getSerializer()->toQueryValue($brightness);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($color_depth !== null) {
            $queryParams['colorDepth'] = $this->apiClient->getSerializer()->toQueryValue($color_depth);
        }
        // query params
        if ($left_margin !== null) {
            $queryParams['leftMargin'] = $this->apiClient->getSerializer()->toQueryValue($left_margin);
        }
        // query params
        if ($right_margin !== null) {
            $queryParams['rightMargin'] = $this->apiClient->getSerializer()->toQueryValue($right_margin);
        }
        // query params
        if ($top_margin !== null) {
            $queryParams['topMargin'] = $this->apiClient->getSerializer()->toQueryValue($top_margin);
        }
        // query params
        if ($bottom_margin !== null) {
            $queryParams['bottomMargin'] = $this->apiClient->getSerializer()->toQueryValue($bottom_margin);
        }
        // query params
        if ($orientation !== null) {
            $queryParams['orientation'] = $this->apiClient->getSerializer()->toQueryValue($orientation);
        }
        // query params
        if ($skip_blank_pages !== null) {
            $queryParams['skipBlankPages'] = $this->apiClient->getSerializer()->toQueryValue($skip_blank_pages);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = $this->apiClient->getSerializer()->toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = $this->apiClient->getSerializer()->toQueryValue($height);
        }
        // query params
        if ($x_resolution !== null) {
            $queryParams['xResolution'] = $this->apiClient->getSerializer()->toQueryValue($x_resolution);
        }
        // query params
        if ($y_resolution !== null) {
            $queryParams['yResolution'] = $this->apiClient->getSerializer()->toQueryValue($y_resolution);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($page_index);
        }
        // query params
        if ($page_count !== null) {
            $queryParams['pageCount'] = $this->apiClient->getSerializer()->toQueryValue($page_count);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/tiff'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToXls
     *
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToXls($name, $out_path, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $folder = null)
    {
        list($response) = $this->putPdfInStorageToXlsWithHttpInfo($name, $out_path, $insert_blank_column_at_first, $minimize_the_number_of_worksheets, $scale_factor, $uniform_worksheets, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToXlsWithHttpInfo
     *
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param bool $insert_blank_column_at_first Insert blank column at first (optional)
     * @param bool $minimize_the_number_of_worksheets Minimize the number of worksheets (optional)
     * @param double $scale_factor Scale factor (optional)
     * @param bool $uniform_worksheets Uniform worksheets (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToXlsWithHttpInfo($name, $out_path, $insert_blank_column_at_first = null, $minimize_the_number_of_worksheets = null, $scale_factor = null, $uniform_worksheets = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToXls');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToXls');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/xls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($insert_blank_column_at_first !== null) {
            $queryParams['insertBlankColumnAtFirst'] = $this->apiClient->getSerializer()->toQueryValue($insert_blank_column_at_first);
        }
        // query params
        if ($minimize_the_number_of_worksheets !== null) {
            $queryParams['minimizeTheNumberOfWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($minimize_the_number_of_worksheets);
        }
        // query params
        if ($scale_factor !== null) {
            $queryParams['scaleFactor'] = $this->apiClient->getSerializer()->toQueryValue($scale_factor);
        }
        // query params
        if ($uniform_worksheets !== null) {
            $queryParams['uniformWorksheets'] = $this->apiClient->getSerializer()->toQueryValue($uniform_worksheets);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/xls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPdfInStorageToXps
     *
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function putPdfInStorageToXps($name, $out_path, $folder = null)
    {
        list($response) = $this->putPdfInStorageToXpsWithHttpInfo($name, $out_path, $folder);
        return $response;
    }

    /**
     * Operation putPdfInStorageToXpsWithHttpInfo
     *
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     *
     * @param string $name The document name. (required)
     * @param string $out_path Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPdfInStorageToXpsWithHttpInfo($name, $out_path, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPdfInStorageToXps');
        }
        // verify the required parameter 'out_path' is set
        if ($out_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $out_path when calling putPdfInStorageToXps');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/convert/xps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($out_path !== null) {
            $queryParams['outPath'] = $this->apiClient->getSerializer()->toQueryValue($out_path);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/pdf/{name}/convert/xps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putSearchableDocument
     *
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param string $lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\SaaSposeResponse
     */
    public function putSearchableDocument($name, $storage = null, $folder = null, $lang = null)
    {
        list($response) = $this->putSearchableDocumentWithHttpInfo($name, $storage, $folder, $lang);
        return $response;
    }

    /**
     * Operation putSearchableDocumentWithHttpInfo
     *
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     *
     * @param string $name The document name. (required)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @param string $lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\SaaSposeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putSearchableDocumentWithHttpInfo($name, $storage = null, $folder = null, $lang = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSearchableDocument');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/ocr";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = $this->apiClient->getSerializer()->toQueryValue($lang);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\SaaSposeResponse',
                '/pdf/{name}/ocr'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\SaaSposeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\SaaSposeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putSetProperty
     *
     * Add/update document property.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param \Aspose\PDF\Model\DocumentProperty $property  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\DocumentPropertyResponse
     */
    public function putSetProperty($name, $property_name, $property = null, $storage = null, $folder = null)
    {
        list($response) = $this->putSetPropertyWithHttpInfo($name, $property_name, $property, $storage, $folder);
        return $response;
    }

    /**
     * Operation putSetPropertyWithHttpInfo
     *
     * Add/update document property.
     *
     * @param string $name  (required)
     * @param string $property_name  (required)
     * @param \Aspose\PDF\Model\DocumentProperty $property  (optional)
     * @param string $storage  (optional)
     * @param string $folder  (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\DocumentPropertyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putSetPropertyWithHttpInfo($name, $property_name, $property = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSetProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($property_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property_name when calling putSetProperty');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/documentproperties/{propertyName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($property_name !== null) {
            $resourcePath = str_replace(
                "{" . "propertyName" . "}",
                $this->apiClient->getSerializer()->toPathValue($property_name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($property)) {
            $_tempBody = $property;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\DocumentPropertyResponse',
                '/pdf/{name}/documentproperties/{propertyName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\DocumentPropertyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\DocumentPropertyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putUpdateField
     *
     * Update field.
     *
     * @param string $name The document name. (required)
     * @param string $field_name The name of a field to be updated. (required)
     * @param \Aspose\PDF\Model\Field $field with the field data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\FieldResponse
     */
    public function putUpdateField($name, $field_name, $field = null, $storage = null, $folder = null)
    {
        list($response) = $this->putUpdateFieldWithHttpInfo($name, $field_name, $field, $storage, $folder);
        return $response;
    }

    /**
     * Operation putUpdateFieldWithHttpInfo
     *
     * Update field.
     *
     * @param string $name The document name. (required)
     * @param string $field_name The name of a field to be updated. (required)
     * @param \Aspose\PDF\Model\Field $field with the field data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\FieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUpdateFieldWithHttpInfo($name, $field_name, $field = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateField');
        }
        // verify the required parameter 'field_name' is set
        if ($field_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_name when calling putUpdateField');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fields/{fieldName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                "{" . "fieldName" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($field)) {
            $_tempBody = $field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\FieldResponse',
                '/pdf/{name}/fields/{fieldName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\FieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\FieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putUpdateFields
     *
     * Update fields.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\Fields $fields with the fields data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return \Aspose\PDF\Model\FieldsResponse
     */
    public function putUpdateFields($name, $fields = null, $storage = null, $folder = null)
    {
        list($response) = $this->putUpdateFieldsWithHttpInfo($name, $fields, $storage, $folder);
        return $response;
    }

    /**
     * Operation putUpdateFieldsWithHttpInfo
     *
     * Update fields.
     *
     * @param string $name The document name. (required)
     * @param \Aspose\PDF\Model\Fields $fields with the fields data. (optional)
     * @param string $storage The document storage. (optional)
     * @param string $folder The document folder. (optional)
     * @throws \Aspose\PDF\ApiException on non-2xx response
     * @return array of \Aspose\PDF\Model\FieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUpdateFieldsWithHttpInfo($name, $fields = null, $storage = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateFields');
        }
        // parse inputs
        $resourcePath = "/pdf/{name}/fields";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = $this->apiClient->getSerializer()->toQueryValue($storage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($fields)) {
            $_tempBody = $fields;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Aspose\PDF\Model\FieldsResponse',
                '/pdf/{name}/fields'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Aspose\PDF\Model\FieldsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Aspose\PDF\Model\FieldsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
